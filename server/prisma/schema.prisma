generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Channel {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  discordId    String       @unique
  webhookId    String       @unique // This *does not* violate third normal
                                    // form. Think of a webhook as a component
                                    // of the channel; it behaves as an
                                    // interface between the channel and other
                                    // platforms
  webhookToken String       @unique
  memberships  Membership[]
  contacts     Contact[]
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  discordId   String?      @unique
  memberships Membership[]
  contacts    Contact[]
}

model Contact {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  contact   String   @unique
  channel   Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int?
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  memberships Membership[]
}

model Membership {
  id        Int     @id @default(autoincrement())
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  role      Role?   @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId    Int?

  @@unique([channelId, userId])
  @@index([channelId, userId])
}
